class BankAccount:
    # Class attribute
    interest_rate = 0.05

    def __init__(self, name, balance=0):
        self.name = name
        self.balance = balance

    # Class to set the interest rate
    @classmethod
    def set_interest_rate(cls, rate):
        cls.interest_rate = rate

    # Class to get the interest rate
    @classmethod
    def get_interest_rate(cls):
        return cls.interest_rate

    # to add money to the balance
    def add_money(self, amount):
        self.balance += amount

    # to withdraw money from the balance
    def withdraw_money(self, amount):
        if amount <= self.balance:
            self.balance -= amount
        else:
            raise ValueError("Insufficient funds")

    # to get the current balance of the account
    def get_account_balance(self):
        return self.balance

    # to calculate the annual interest based on the current balance
    def calculate_annual_interest(self):
        return self.balance * self.interest_rate

# Example usage:
# Creating an instance of BankAccount
account = BankAccount(name='John Doe', balance=1000)

# Setting the interest rate for all BankAccount instances
BankAccount.set_interest_rate(0.03)

# Getting the interest rate
print(BankAccount.get_interest_rate())  # Output: 0.03

# Adding money to the account
account.add_money(500)

# Withdrawing money from the account
try:
    account.withdraw_money(200)
except ValueError as e:
    print(e)

# Checking the current balance
print(account.get_account_balance())  # Output: 1300 (after depositing and withdrawing)

# Calculating annual interest
print(account.calculate_annual_interest())  # Output: 39.0 (1300 * 0.03)